# .github/workflows/terraform-deploy.yml
name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      resource_type:
        description: 'Type of resource to deploy'
        required: true
        type: choice
        options:
          - ec2_instance
          - s3_bucket
          - rds_instance
          - ecs_service
          - alb
          - security_group
      
      name:
        description: 'Resource name'
        required: true
        type: string
      
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      
      region:
        description: 'AWS region'
        required: true
        default: 'eu-west-2'
        type: choice
        options:
          - eu-west-2
          - us-east-1
          - us-west-2
          - eu-west-1
      
      # Core resource parameters as JSON
      config_json:
        description: 'Resource configuration as JSON (see documentation for format)'
        required: false 
        type: string
        default: '{}'
      
      # At least one networking parameter
      subnet_id:
        description: 'Primary subnet ID for the resource'
        required: false
        default: 'subnet-07759e500cfdfb6b2'
        type: string

env:
    TF_STATE_BUCKET: "platform-hub-terraform-state"
    TF_STATE_KEY: "${{ github.event.inputs.environment }}/${{ github.event.inputs.resource_type }}/${{ github.event.inputs.name }}.tfstate"
    TF_STATE_REGION: "${{ github.event.inputs.region }}"
    AWS_REGION: "${{ github.event.inputs.region }}"
    APP_WEBHOOK_URL: "${{ secrets.APP_WEBHOOK_URL }}"
    SECURITY_GROUP_ID: "sg-060323606252babd1"

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    # Configure AWS credentials with role assumption
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::436549840164:role/github_action_role
        aws-region: ${{ github.event.inputs.region }}
    
    - name: Generate Deployment ID
      id: deployment_id
      run: |
        TIMESTAMP=$(date +%s)
        RANDOM_SUFFIX=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
        echo "id=deploy-${TIMESTAMP}-${RANDOM_SUFFIX}" >> $GITHUB_OUTPUT
    
    - name: Parse Configuration
      id: config
      run: |
        # Set default values based on resource type
        case "${{ github.event.inputs.resource_type }}" in
          ec2_instance)
            echo "instance_type=t2.micro" >> $GITHUB_OUTPUT
            echo "volume_size=20" >> $GITHUB_OUTPUT
            echo "assign_eip=true" >> $GITHUB_OUTPUT
            ;;
          s3_bucket)
            echo "versioning_enabled=false" >> $GITHUB_OUTPUT
            echo "bucket_name=${{ github.event.inputs.name }}-${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            ;;
          rds_instance)
            echo "engine=mysql" >> $GITHUB_OUTPUT
            echo "engine_version=8.0" >> $GITHUB_OUTPUT
            echo "instance_class=db.t3.micro" >> $GITHUB_OUTPUT
            echo "allocated_storage=20" >> $GITHUB_OUTPUT
            echo "master_username=admin" >> $GITHUB_OUTPUT
            echo "multi_az=false" >> $GITHUB_OUTPUT
            ;;
          ecs_service)
            echo "container_image=nginx:latest" >> $GITHUB_OUTPUT
            echo "container_port=80" >> $GITHUB_OUTPUT
            echo "cpu=256" >> $GITHUB_OUTPUT
            echo "memory=512" >> $GITHUB_OUTPUT
            echo "launch_type=FARGATE" >> $GITHUB_OUTPUT
            ;;
          alb)
            echo "internal=false" >> $GITHUB_OUTPUT
            ;;
          security_group)
            echo "sg_description=Managed by Terraform" >> $GITHUB_OUTPUT
            echo "vpc_id=vpc-default" >> $GITHUB_OUTPUT
            echo 'ingress_rules=[{"from_port":80,"to_port":80,"protocol":"tcp","cidr_blocks":["0.0.0.0/0"],"description":"HTTP"}]' >> $GITHUB_OUTPUT
            ;;
        esac
        
        # If JSON is provided, override defaults by parsing it
        if [ -n "${{ github.event.inputs.config_json }}" ] && [ "${{ github.event.inputs.config_json }}" != "{}" ]; then
          echo "Parsing configuration JSON..."
          CONFIG='${{ github.event.inputs.config_json }}'
          
          # Parse each property from the JSON and add to output
          for key in $(echo "$CONFIG" | jq -r 'keys[]'); do
            value=$(echo "$CONFIG" | jq -r --arg k "$key" '.[$k]')
            echo "$key=$value" >> $GITHUB_OUTPUT
          done
        fi
    
    - name: Generate Terraform Configuration
      id: generate_terraform
      run: |
        mkdir -p terraform-config
        
        # Create variables.tf
        cat > terraform-config/variables.tf << EOF
        # Common variables
        variable "name" {
          description = "Resource name"
          type        = string
          default     = "${{ github.event.inputs.name }}"
        }
        
        variable "environment" {
          description = "Environment (dev, staging, prod)"
          type        = string
          default     = "${{ github.event.inputs.environment }}"
        }
        
        variable "region" {
          description = "AWS region"
          type        = string
          default     = "${{ github.event.inputs.region }}"
        }
        
        variable "subnet_id" {
          description = "Subnet ID"
          type        = string
          default     = "${{ github.event.inputs.subnet_id }}"
        }
        
        variable "deployment_id" {
          description = "Unique deployment ID"
          type        = string
          default     = "${{ steps.deployment_id.outputs.id }}"
        }
        
        # Resource-specific variables
        # These will vary depending on the resource type
        EOF
        
        # Add resource-specific variables based on resource type
        case "${{ github.event.inputs.resource_type }}" in
          ec2_instance)
            cat >> terraform-config/variables.tf << EOF
        # EC2 specific variables
        variable "instance_type" {
          description = "EC2 instance type"
          type        = string
          default     = "${{ steps.config.outputs.instance_type }}"
        }
        
        variable "root_volume_size" {
          description = "Root volume size in GB"
          type        = number
          default     = ${{ steps.config.outputs.volume_size }}
        }
        
        variable "assign_eip" {
          description = "Whether to assign an Elastic IP"
          type        = bool
          default     = ${{ steps.config.outputs.assign_eip }}
        }
        
        variable "security_group_ids" {
          description = "Security group IDs"
          type        = list(string)
          default     = ["${SECURITY_GROUP_ID}"]
        }
        EOF
            ;;
            
          s3_bucket)
            cat >> terraform-config/variables.tf << EOF
        # S3 specific variables
        variable "bucket_name" {
          description = "S3 bucket name"
          type        = string
          default     = "${{ steps.config.outputs.bucket_name }}"
        }
        
        variable "versioning_enabled" {
          description = "Enable versioning for S3 bucket"
          type        = bool
          default     = ${{ steps.config.outputs.versioning_enabled }}
        }
        EOF
            ;;
            
          rds_instance)
            cat >> terraform-config/variables.tf << EOF
        # RDS specific variables
        variable "engine" {
          description = "Database engine"
          type        = string
          default     = "${{ steps.config.outputs.engine }}"
        }
        
        variable "engine_version" {
          description = "Database engine version"
          type        = string
          default     = "${{ steps.config.outputs.engine_version }}"
        }
        
        variable "instance_class" {
          description = "RDS instance class"
          type        = string
          default     = "${{ steps.config.outputs.instance_class }}"
        }
        
        variable "allocated_storage" {
          description = "Allocated storage in GB"
          type        = number
          default     = ${{ steps.config.outputs.allocated_storage }}
        }
        
        variable "master_username" {
          description = "Database master username"
          type        = string
          default     = "${{ steps.config.outputs.master_username }}"
        }
        
        variable "master_password" {
          description = "Database master password"
          type        = string
          default     = ""
          sensitive   = true
        }
        
        variable "multi_az" {
          description = "Enable Multi-AZ deployment"
          type        = bool
          default     = ${{ steps.config.outputs.multi_az }}
        }
        
        variable "vpc_id" {
          description = "VPC ID"
          type        = string
          default     = "${{ steps.config.outputs.vpc_id || 'vpc-default' }}"
        }
        EOF
            ;;
            
          ecs_service)
            cat >> terraform-config/variables.tf << EOF
        # ECS specific variables
        variable "container_image" {
          description = "Container image"
          type        = string
          default     = "${{ steps.config.outputs.container_image }}"
        }
        
        variable "container_port" {
          description = "Container port"
          type        = number
          default     = ${{ steps.config.outputs.container_port }}
        }
        
        variable "cpu" {
          description = "CPU units for ECS task"
          type        = number
          default     = ${{ steps.config.outputs.cpu }}
        }
        
        variable "memory" {
          description = "Memory for ECS task in MB"
          type        = number
          default     = ${{ steps.config.outputs.memory }}
        }
        
        variable "launch_type" {
          description = "ECS launch type"
          type        = string
          default     = "${{ steps.config.outputs.launch_type }}"
        }
        
        variable "vpc_id" {
          description = "VPC ID"
          type        = string
          default     = "${{ steps.config.outputs.vpc_id || 'vpc-default' }}"
        }
        EOF
            ;;
            
          alb)
            cat >> terraform-config/variables.tf << EOF
        # ALB specific variables
        variable "internal" {
          description = "Whether the ALB should be internal"
          type        = bool
          default     = ${{ steps.config.outputs.internal }}
        }
        
        variable "vpc_id" {
          description = "VPC ID"
          type        = string
          default     = "${{ steps.config.outputs.vpc_id || 'vpc-default' }}"
        }
        EOF
            ;;
            
          security_group)
            cat >> terraform-config/variables.tf << EOF
        # Security Group specific variables
        variable "sg_description" {
          description = "Security group description"
          type        = string
          default     = "${{ steps.config.outputs.sg_description }}"
        }
        
        variable "vpc_id" {
          description = "VPC ID"
          type        = string
          default     = "${{ steps.config.outputs.vpc_id || 'vpc-default' }}"
        }
        
        variable "ingress_rules" {
          description = "Ingress rules for security group"
          type        = string
          default     = <<-EOT
        ${{ steps.config.outputs.ingress_rules }}
        EOT
        }
        EOF
            ;;
        esac
    
    - name: Terraform Init
      working-directory: terraform-config
      run: terraform init
    
    - name: Terraform Plan
      working-directory: terraform-config
      run: terraform plan -var="deployment_id=${{ steps.deployment_id.outputs.id }}" -out=tfplan
      
    - name: Terraform Apply
      working-directory: terraform-config
      run: terraform apply -auto-approve tfplan
    
    - name: Capture Terraform Outputs
      working-directory: terraform-config
      id: terraform_output
      run: |
        OUTPUTS=$(terraform output -json)
        echo "outputs=$OUTPUTS" >> $GITHUB_OUTPUT
    
    - name: Post Success Results to Application
      if: success() && env.APP_WEBHOOK_URL != ''
      run: |
          # Generate detailed logs
          LOGS_JSON=$(cat <<-EOF
          [
            "Starting Terraform deployment for ${{ github.event.inputs.resource_type }}",
            "Name: ${{ github.event.inputs.name }}",
            "Environment: ${{ github.event.inputs.environment }}",
            "Region: ${{ github.event.inputs.region }}",
            "Terraform initialization completed successfully",
            "Terraform plan completed successfully",
            "Terraform apply completed successfully",
            "Resource created successfully"
          ]
          EOF
          )
          
          # Send webhook with detailed information
          curl -X POST -H "Content-Type: application/json" -d '{
            "secret": "${{ secrets.WEBHOOK_SECRET }}",
            "deployment_id": "${{ steps.deployment_id.outputs.id }}",
            "status": "completed",
            "resource_type": "${{ github.event.inputs.resource_type }}",
            "name": "${{ github.event.inputs.name }}",
            "environment": "${{ github.event.inputs.environment }}",
            "region": "${{ github.event.inputs.region }}",
            "outputs": ${{ steps.terraform_output.outputs.outputs }},
            "requested_by": "${{ github.actor }}",
            "completed_at": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "logs": '"$LOGS_JSON"'
          }' ${{ env.APP_WEBHOOK_URL }}
      
    - name: Post Failure Results to Application
      if: failure() && env.APP_WEBHOOK_URL != ''
      run: |
          # Determine which step failed
          FAILED_STEP="Unknown"
          ERROR_MESSAGE="Deployment failed in GitHub Actions workflow"
          
          if [ -f "terraform-config/terraform.log" ]; then
            ERROR_MESSAGE=$(tail -n 20 terraform-config/terraform.log)
          elif [ -f "terraform-config/error.log" ]; then
            ERROR_MESSAGE=$(cat terraform-config/error.log)
          fi
          
          # Generate detailed error logs
          LOGS_JSON=$(cat <<-EOF
          [
            "Deployment of ${{ github.event.inputs.resource_type }} failed",
            "Name: ${{ github.event.inputs.name }}",
            "Environment: ${{ github.event.inputs.environment }}",
            "Region: ${{ github.event.inputs.region }}",
            "Error details: ${ERROR_MESSAGE}"
          ]
          EOF
          )
          
          # Send webhook with detailed error information
          curl -X POST -H "Content-Type: application/json" -d '{
            "secret": "${{ secrets.WEBHOOK_SECRET }}",
            "deployment_id": "${{ steps.deployment_id.outputs.id }}",
            "status": "failed",
            "resource_type": "${{ github.event.inputs.resource_type }}",
            "name": "${{ github.event.inputs.name }}",
            "environment": "${{ github.event.inputs.environment }}",
            "region": "${{ github.event.inputs.region }}",
            "outputs": {},
            "error_message": "'"$ERROR_MESSAGE"'",
            "requested_by": "${{ github.actor }}",
            "completed_at": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "logs": '"$LOGS_JSON"'
          }' ${{ env.APP_WEBHOOK_URL }}